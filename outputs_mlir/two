module {
  llvm.func @malloc(i64) -> !llvm.ptr<i8>
  func.func private @puts(!llvm.ptr<i8>) -> i32
  func.func private @atoi(!llvm.ptr<i8>) -> i32
  func.func private @srand(i32)
  func.func private @rand() -> i32
  func.func private @print_i32(i32)
  func.func private @print_i64(i64)
  func.func private @print_f64_cerr(f64)
  func.func private @timer() -> i64
  func.func private @timer_elapsed(i64) -> i64
  func.func private @main(%arg0: i32, %arg1: !llvm.ptr<ptr<i8>>) {
    %0 = llvm.mlir.constant(0 : index) : i64
    %1 = llvm.mlir.constant(1000000 : i32) : i32
    %2 = llvm.mlir.constant(1.000000e+06 : f64) : f64
    %3 = llvm.mlir.constant(0 : i32) : i32
    %4 = llvm.mlir.constant(0.000000e+00 : f64) : f64
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = builtin.unrealized_conversion_cast %5 : i64 to index
    %7 = builtin.unrealized_conversion_cast %0 : i64 to index
    call @srand(%3) : (i32) -> ()
    %8 = llvm.getelementptr %arg1[1] : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<ptr<i8>>
    %9 = llvm.load %8 : !llvm.ptr<ptr<i8>>
    %10 = call @atoi(%9) : (!llvm.ptr<i8>) -> i32
    %11 = llvm.sext %10 : i32 to i64
    %12 = builtin.unrealized_conversion_cast %11 : i64 to index
    %13 = llvm.getelementptr %arg1[2] : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<ptr<i8>>
    %14 = llvm.load %13 : !llvm.ptr<ptr<i8>>
    %15 = call @atoi(%14) : (!llvm.ptr<i8>) -> i32
    %16 = llvm.sext %15 : i32 to i64
    %17 = builtin.unrealized_conversion_cast %16 : i64 to index
    %18 = llvm.getelementptr %arg1[3] : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<ptr<i8>>
    %19 = llvm.load %18 : !llvm.ptr<ptr<i8>>
    %20 = call @atoi(%19) : (!llvm.ptr<i8>) -> i32
    %21 = llvm.sext %20 : i32 to i64
    %22 = builtin.unrealized_conversion_cast %21 : i64 to index
    %23 = llvm.getelementptr %arg1[4] : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<ptr<i8>>
    %24 = llvm.load %23 : !llvm.ptr<ptr<i8>>
    %25 = call @atoi(%24) : (!llvm.ptr<i8>) -> i32
    %26 = llvm.sext %25 : i32 to i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    %28 = llvm.getelementptr %arg1[5] : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<ptr<i8>>
    %29 = llvm.load %28 : !llvm.ptr<ptr<i8>>
    %30 = call @atoi(%29) : (!llvm.ptr<i8>) -> i32
    %31 = llvm.sext %30 : i32 to i64
    %32 = llvm.getelementptr %arg1[6] : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<ptr<i8>>
    %33 = llvm.load %32 : !llvm.ptr<ptr<i8>>
    %34 = call @atoi(%33) : (!llvm.ptr<i8>) -> i32
    %35 = llvm.sext %34 : i32 to i64
    %36 = llvm.mul %26, %11  : i64
    %37 = llvm.mlir.null : !llvm.ptr<f64>
    %38 = llvm.getelementptr %37[%36] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %39 = llvm.ptrtoint %38 : !llvm.ptr<f64> to i64
    %40 = llvm.call @malloc(%39) : (i64) -> !llvm.ptr<i8>
    %41 = llvm.bitcast %40 : !llvm.ptr<i8> to !llvm.ptr<f64>
    %42 = llvm.mul %21, %16  : i64
    %43 = llvm.mul %42, %11  : i64
    %44 = llvm.getelementptr %37[%43] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %45 = llvm.ptrtoint %44 : !llvm.ptr<f64> to i64
    %46 = llvm.call @malloc(%45) : (i64) -> !llvm.ptr<i8>
    %47 = llvm.bitcast %46 : !llvm.ptr<i8> to !llvm.ptr<f64>
    %48 = llvm.mul %26, %16  : i64
    %49 = llvm.getelementptr %37[%48] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %50 = llvm.ptrtoint %49 : !llvm.ptr<f64> to i64
    %51 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr<i8>
    %52 = llvm.bitcast %51 : !llvm.ptr<i8> to !llvm.ptr<f64>
    %53 = llvm.mul %26, %21  : i64
    %54 = llvm.getelementptr %37[%53] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %55 = llvm.ptrtoint %54 : !llvm.ptr<f64> to i64
    %56 = llvm.call @malloc(%55) : (i64) -> !llvm.ptr<i8>
    %57 = llvm.bitcast %56 : !llvm.ptr<i8> to !llvm.ptr<f64>
    cf.br ^bb1(%7 : index)
  ^bb1(%58: index):  // 2 preds: ^bb0, ^bb11
    %59 = arith.cmpi slt, %58, %12 : index
    cf.cond_br %59, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    %60 = builtin.unrealized_conversion_cast %58 : index to i64
    %61 = builtin.unrealized_conversion_cast %58 : index to i64
    %62 = llvm.icmp "eq" %60, %31 : i64
    cf.br ^bb3(%7 : index)
  ^bb3(%63: index):  // 2 preds: ^bb2, ^bb10
    %64 = arith.cmpi slt, %63, %17 : index
    cf.cond_br %64, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    %65 = builtin.unrealized_conversion_cast %63 : index to i64
    cf.br ^bb5(%7 : index)
  ^bb5(%66: index):  // 2 preds: ^bb4, ^bb9
    %67 = arith.cmpi slt, %66, %22 : index
    cf.cond_br %67, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    %68 = builtin.unrealized_conversion_cast %66 : index to i64
    cf.cond_br %62, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %69 = call @rand() : () -> i32
    %70 = llvm.urem %69, %1  : i32
    %71 = llvm.sitofp %70 : i32 to f64
    %72 = llvm.fdiv %71, %2  : f64
    %73 = llvm.mul %61, %42  : i64
    %74 = llvm.mul %65, %21  : i64
    %75 = llvm.add %73, %74  : i64
    %76 = llvm.add %75, %68  : i64
    %77 = llvm.getelementptr %47[%76] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    llvm.store %72, %77 : !llvm.ptr<f64>
    cf.br ^bb9
  ^bb8:  // pred: ^bb6
    %78 = llvm.mul %61, %42  : i64
    %79 = llvm.mul %65, %21  : i64
    %80 = llvm.add %78, %79  : i64
    %81 = llvm.add %80, %68  : i64
    %82 = llvm.getelementptr %47[%81] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    llvm.store %4, %82 : !llvm.ptr<f64>
    cf.br ^bb9
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %83 = arith.addi %66, %6 : index
    cf.br ^bb5(%83 : index)
  ^bb10:  // pred: ^bb5
    %84 = arith.addi %63, %6 : index
    cf.br ^bb3(%84 : index)
  ^bb11:  // pred: ^bb3
    %85 = arith.addi %58, %6 : index
    cf.br ^bb1(%85 : index)
  ^bb12:  // pred: ^bb1
    cf.br ^bb13(%7 : index)
  ^bb13(%86: index):  // 2 preds: ^bb12, ^bb17
    %87 = arith.cmpi slt, %86, %17 : index
    cf.cond_br %87, ^bb14, ^bb18
  ^bb14:  // pred: ^bb13
    %88 = builtin.unrealized_conversion_cast %86 : index to i64
    %89 = llvm.mul %88, %26  : i64
    cf.br ^bb15(%7 : index)
  ^bb15(%90: index):  // 2 preds: ^bb14, ^bb16
    %91 = arith.cmpi slt, %90, %27 : index
    cf.cond_br %91, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %92 = builtin.unrealized_conversion_cast %90 : index to i64
    %93 = call @rand() : () -> i32
    %94 = llvm.urem %93, %1  : i32
    %95 = llvm.sitofp %94 : i32 to f64
    %96 = llvm.fdiv %95, %2  : f64
    %97 = llvm.add %89, %92  : i64
    %98 = llvm.getelementptr %52[%97] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    llvm.store %96, %98 : !llvm.ptr<f64>
    %99 = arith.addi %90, %6 : index
    cf.br ^bb15(%99 : index)
  ^bb17:  // pred: ^bb15
    %100 = arith.addi %86, %6 : index
    cf.br ^bb13(%100 : index)
  ^bb18:  // pred: ^bb13
    cf.br ^bb19(%7 : index)
  ^bb19(%101: index):  // 2 preds: ^bb18, ^bb26
    %102 = arith.cmpi slt, %101, %22 : index
    cf.cond_br %102, ^bb20, ^bb27
  ^bb20:  // pred: ^bb19
    %103 = builtin.unrealized_conversion_cast %101 : index to i64
    cf.br ^bb21(%7 : index)
  ^bb21(%104: index):  // 2 preds: ^bb20, ^bb25
    %105 = arith.cmpi slt, %104, %27 : index
    cf.cond_br %105, ^bb22, ^bb26
  ^bb22:  // pred: ^bb21
    %106 = builtin.unrealized_conversion_cast %104 : index to i64
    %107 = builtin.unrealized_conversion_cast %104 : index to i64
    %108 = llvm.icmp "eq" %106, %35 : i64
    cf.cond_br %108, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %109 = call @rand() : () -> i32
    %110 = llvm.urem %109, %1  : i32
    %111 = llvm.sitofp %110 : i32 to f64
    %112 = llvm.fdiv %111, %2  : f64
    %113 = llvm.mul %103, %26  : i64
    %114 = llvm.add %113, %107  : i64
    %115 = llvm.getelementptr %57[%114] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    llvm.store %112, %115 : !llvm.ptr<f64>
    cf.br ^bb25
  ^bb24:  // pred: ^bb22
    %116 = llvm.mul %103, %26  : i64
    %117 = llvm.add %116, %107  : i64
    %118 = llvm.getelementptr %57[%117] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    llvm.store %4, %118 : !llvm.ptr<f64>
    cf.br ^bb25
  ^bb25:  // 2 preds: ^bb23, ^bb24
    %119 = arith.addi %104, %6 : index
    cf.br ^bb21(%119 : index)
  ^bb26:  // pred: ^bb21
    %120 = arith.addi %101, %6 : index
    cf.br ^bb19(%120 : index)
  ^bb27:  // pred: ^bb19
    cf.br ^bb28(%7 : index)
  ^bb28(%121: index):  // 2 preds: ^bb27, ^bb32
    %122 = arith.cmpi slt, %121, %12 : index
    cf.cond_br %122, ^bb29, ^bb33
  ^bb29:  // pred: ^bb28
    %123 = builtin.unrealized_conversion_cast %121 : index to i64
    %124 = llvm.mul %123, %26  : i64
    cf.br ^bb30(%7 : index)
  ^bb30(%125: index):  // 2 preds: ^bb29, ^bb31
    %126 = arith.cmpi slt, %125, %27 : index
    cf.cond_br %126, ^bb31, ^bb32
  ^bb31:  // pred: ^bb30
    %127 = builtin.unrealized_conversion_cast %125 : index to i64
    %128 = llvm.add %124, %127  : i64
    %129 = llvm.getelementptr %41[%128] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    llvm.store %4, %129 : !llvm.ptr<f64>
    %130 = arith.addi %125, %6 : index
    cf.br ^bb30(%130 : index)
  ^bb32:  // pred: ^bb30
    %131 = arith.addi %121, %6 : index
    cf.br ^bb28(%131 : index)
  ^bb33:  // pred: ^bb28
    %132 = call @timer() : () -> i64
    %133 = llvm.icmp "slt" %31, %11 : i64
    cf.cond_br %133, ^bb34, ^bb43
  ^bb34:  // pred: ^bb33
    %134 = llvm.icmp "slt" %35, %26 : i64
    cf.cond_br %134, ^bb35, ^bb42
  ^bb35:  // pred: ^bb34
    %135 = llvm.mul %31, %42  : i64
    cf.br ^bb36(%7, %4 : index, f64)
  ^bb36(%136: index, %137: f64):  // 2 preds: ^bb35, ^bb40
    %138 = arith.cmpi slt, %136, %17 : index
    cf.cond_br %138, ^bb37, ^bb41
  ^bb37:  // pred: ^bb36
    %139 = builtin.unrealized_conversion_cast %136 : index to i64
    %140 = llvm.mul %139, %21  : i64
    %141 = llvm.add %135, %140  : i64
    %142 = llvm.mul %139, %26  : i64
    %143 = llvm.add %142, %35  : i64
    %144 = llvm.getelementptr %52[%143] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    cf.br ^bb38(%7, %4 : index, f64)
  ^bb38(%145: index, %146: f64):  // 2 preds: ^bb37, ^bb39
    %147 = arith.cmpi slt, %145, %22 : index
    cf.cond_br %147, ^bb39, ^bb40
  ^bb39:  // pred: ^bb38
    %148 = builtin.unrealized_conversion_cast %145 : index to i64
    %149 = llvm.add %141, %148  : i64
    %150 = llvm.getelementptr %47[%149] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %151 = llvm.load %150 : !llvm.ptr<f64>
    %152 = llvm.load %144 : !llvm.ptr<f64>
    %153 = llvm.mul %148, %26  : i64
    %154 = llvm.add %153, %35  : i64
    %155 = llvm.getelementptr %57[%154] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %156 = llvm.load %155 : !llvm.ptr<f64>
    %157 = llvm.fmul %151, %152  : f64
    %158 = llvm.fmul %157, %156  : f64
    %159 = llvm.fadd %158, %146  : f64
    %160 = arith.addi %145, %6 : index
    cf.br ^bb38(%160, %159 : index, f64)
  ^bb40:  // pred: ^bb38
    %161 = llvm.fadd %146, %137  : f64
    %162 = arith.addi %136, %6 : index
    cf.br ^bb36(%162, %161 : index, f64)
  ^bb41:  // pred: ^bb36
    %163 = llvm.mul %31, %26  : i64
    %164 = llvm.add %163, %35  : i64
    %165 = llvm.getelementptr %41[%164] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %166 = llvm.load %165 : !llvm.ptr<f64>
    %167 = llvm.fadd %137, %166  : f64
    llvm.store %167, %165 : !llvm.ptr<f64>
    cf.br ^bb42
  ^bb42:  // 2 preds: ^bb34, ^bb41
    cf.br ^bb43
  ^bb43:  // 2 preds: ^bb33, ^bb42
    %168 = call @timer_elapsed(%132) : (i64) -> i64
    %169 = llvm.mul %26, %0  : i64
    %170 = llvm.add %169, %0  : i64
    %171 = llvm.getelementptr %41[%170] : (!llvm.ptr<f64>, i64) -> !llvm.ptr<f64>
    %172 = llvm.load %171 : !llvm.ptr<f64>
    call @print_f64_cerr(%172) : (f64) -> ()
    call @print_i64(%168) : (i64) -> ()
    return
  }
}

