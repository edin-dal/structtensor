[info] welcome to sbt 1.8.2 (Private Build Java 1.8.0_362)
[info] loading project definition from /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/project
[info] loading settings for project structtensor from build.sbt ...
[info] set current project to hello-world (in build file:/home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/)
[info] compiling 1 Scala source to /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/target/scala-2.13/classes ...
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:239:7: match may not be exhaustive.
[warn] It would fail on the following inputs: (Access(_, _, _), Access(_, _, _)), (Access(_, _, _), Comparison(_, _, _)), (Comparison(_, _, _), Access(_, _, _))
[warn]       (e1, e2) match {
[warn]       ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:360:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:447:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:504:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:524:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:592:11: match may not be exhaustive.
[warn] It would fail on the following inputs: Arithmetic(_, _, _), ConstantDouble(_), ConstantInt(_)
[warn]           index1 match {
[warn]           ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:612:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet), Comparison(_, _, _)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:642:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] 1 deprecation (since 2.11.0)
[warn] 7 deprecations (since 2.13.0)
[warn] 71 deprecations (since 2.13.3)
[warn] 79 deprecations in total; re-run with -deprecation for details
[warn] 12 warnings found
[info] done compiling
[info] running Main 
variables:
List(Variable(j), Variable(i))
==================
outUS
Y_US(i) := (((0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * (0 <= j) * (N > j)) + ((1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (0 <= j) * (N > j)))
------------------
outRM
Y_RM(i, i') := ∅
------------------
outDI
List(DimInfo(Access(H,List(Variable(i), Variable(j)),Tensor),List(Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)), Variable(N))), DimInfo(Access(X,List(Variable(j)),Tensor),List(Variable(N))), DimInfo(Access(Y,List(Variable(i)),Tensor),List(Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))))
==================
variableConditionMapUS
List(Map(Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M))), Variable(j) -> List((<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)))), Map(Variable(j) -> List((<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(i) -> List((<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j') -> List((=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))))))
------------------
variableConditionMapRM
List()
==================
unifiedVariableConditionMapUS
List(Map(Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M))), Variable(j) -> List((<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)))), Map(Variable(j) -> List((<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(i) -> List((<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j') -> List((=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))))))
------------------
unifiedVariableConditionMapRM
List()
==================
unifiedOutUS
Y_US(i) := (((0 <= i) * (((M + N) - 1) > i) * (M > i) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j)) + ((1 <= j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j <= i) * ((j + M) > i) * (0 <= i) * (((M + N) - 1) > i) * (j' = 0) * (i' = (i - j))))
------------------
unifiedOutRM
Y_RM(i, i') := ∅
==================
distinctOutUS
Y_US(i) := (((N > j) * (j = 0) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (M > i)) + ((N > j) * (1 <= j) * (i' = (i - j)) * (((M + N) - 1) > i) * (0 <= j) * (j' = 0) * ((j + M) > i) * (j <= i) * (0 <= i)))
------------------
distinctOutRM
Y_RM(i, i') := ∅
==================
simplifiedOutUS
Y_US(i) := (((N > j) * (j = 0) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (M > i)) + ((N > j) * (1 <= j) * (i' = (i - j)) * (((M + N) - 1) > i) * (0 <= j) * (j' = 0) * ((j + M) > i) * (j <= i) * (0 <= i)))
------------------
simplifiedOutRM
Y_RM(i, i') := ∅
==================
distinctConditionMapUS
List(Map(Variable(j) -> List((>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0))), Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)))), Map(Variable(j) -> List((>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j)))), Variable(i) -> List((>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,Variable(j)), (<=,ConstantInt(0))), Variable(j') -> List((=,ConstantInt(0)))))
------------------
distinctConditionMapRM
List()
==================
fixedConditionOrderUS
List(Map(Variable(j) -> List((>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0))), Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)))), Map(Variable(j) -> List((>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0))), Variable(i) -> List((>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,Variable(j)), (<=,ConstantInt(0))), Variable(j') -> List((=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))))))
------------------
fixedConditionOrderRM
List()
==================
intervalsUS
List(Map(Variable(i) -> Interval(List(ConstantInt(0)),List(Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)), Variable(M)))), Map(Variable(j) -> Interval(List(ConstantInt(1), ConstantInt(0)),List(Variable(N))), Variable(i) -> Interval(List(Variable(j), ConstantInt(0)),List(Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)), Arithmetic(+,Variable(j),Variable(M))))))
------------------
intervalsRM
List()
==================
intervalsSimplifiedUS
List(Map(Variable(i) -> Interval(List(ConstantInt(0)),List(Variable(M), Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))))), Map(Variable(j) -> Interval(List(ConstantInt(1)),List(Variable(N))), Variable(i) -> Interval(List(Variable(j)),List(Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)), Arithmetic(+,Variable(j),Variable(M))))))
------------------
intervalsSimplifiedRM
List()
==================
finalUS
Y_US(i) := (((0 <= i) * (M > i) * (((M + N) - 1) > i) * (j = 0)) + ((1 <= j) * (N > j) * (j <= i) * (((M + N) - 1) > i) * ((j + M) > i) * (j' = 0) * (i' = (i - j))))
------------------
finalRM
Y_RM(i, i') := ∅
==================
void compute() {



for (int i = 0; i < std::min({M, ((M + N) - 1)}); ++i) {
Y[i] += (H[i][0] * X[0]);
}


for (int j = 1; j < N; ++j) {
for (int i = j; i < std::min({((M + N) - 1), (j + M)}); ++i) {
Y[i] += (H[i - j][j] * X[j]);
}
}

}


void reconstruct() {
Y[i] += ((H[i][j] * X[j]));
}

[success] Total time: 10 s, completed 05-Apr-2023 00:42:19
