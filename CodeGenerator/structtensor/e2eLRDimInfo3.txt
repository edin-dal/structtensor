[info] welcome to sbt 1.5.5 (AdoptOpenJDK Java 1.8.0_292)
[info] loading project definition from /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/project
[info] loading settings for project structtensor from build.sbt ...
[info] set current project to hello-world (in build file:/home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/)
[info] compiling 1 Scala source to /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/target/scala-2.13/classes ...
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:200:7: match may not be exhaustive.
[warn] It would fail on the following inputs: (Access(_, _, _), Access(_, _, _)), (Access(_, _, _), Comparison(_, _, _)), (Comparison(_, _, _), Access(_, _, _))
[warn]       (e1, e2) match {
[warn]       ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:317:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:399:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:458:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:478:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:523:11: match may not be exhaustive.
[warn] It would fail on the following inputs: Arithmetic(_, _, _), ConstantDouble(_), ConstantInt(_)
[warn]           index1 match {
[warn]           ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:544:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet), Comparison(_, _, _)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:574:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] 8 deprecations (since 2.13.0)
[warn] 83 deprecations (since 2.13.3)
[warn] 91 deprecations in total; re-run with -deprecation for details
[warn] 11 warnings found
[info] done compiling
[info] running Main 
cont_degree2(x0, x1) := ((cont_sum1(x0) * cont_sum1(x1)))
r.cont_degree2(x0, x1) := ((cont_degree2(x0, x1)) + (other.cont_degree2(x0, x1)))
(binAddUS_SOPEQ: ,r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binAddRM_SOPEQ: ,r.cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binAddDimInfo_SOPEQ: ,DimInfo(Access(r.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor),Vector(Variable(CONT_SZ), Variable(CONT_SZ))))
r.cont_degree2(x0, x1) := ((cont_degree2(x0, x1) * other.count) + (cont_sum1(x0) * other.cont_sum1(y1) * (y1 = (x1 - CONT_SZ))) + (count * other.cont_degree2(y0, y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))))
head1(x0, x1) := ((cont_degree2(x0, x1) * other.count))
(binMultUS: ,head1_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binMultRM: ,head1_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binMultDimInfo: ,DimInfo(Access(head1,List(Variable(x0), Variable(x1)),Tensor),List(Variable(CONT_SZ), Variable(CONT_SZ))))
head6(x0, y1) := ((cont_sum1(x0) * other.cont_sum1(y1)))
(binMultUS: ,head6_US(x0, y1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1))))
(binMultRM: ,head6_RM(x0, y1, x0', y1') := ∅)
(binMultDimInfo: ,DimInfo(Access(head6,List(Variable(x0), Variable(y1)),Tensor),List(Variable(CONT_SZ), Variable(CONT_SZ2))))
head5(x0, x1) := ((head6(x0, y1) * (y1 = (x1 - CONT_SZ))))
(appendUS: ,head5_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1))))
(appendRM: ,head5_RM(x0, x1, x0', x1') := ∅)
(appendDimInfo: ,DimInfo(Access(head5,List(Variable(x0), Variable(x1)),Tensor),List(Variable(CONT_SZ), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
head10(y0, y1) := ((count * other.cont_degree2(y0, y1)))
(binMultUS: ,head10_US(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1))))
(binMultRM: ,head10_RM(y0, y1, y0', y1') := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y1 = x0') * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = x1') * (y0 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1))))
(binMultDimInfo: ,DimInfo(Access(head10,List(Variable(y0), Variable(y1)),Tensor),List(Variable(CONT_SZ2), Variable(CONT_SZ2))))
head9(x0, x1) := ((head10(y0, y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))))
(appendUS: ,head9_US(x0, x1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1))))
(appendRM: ,head9_RM(x0, x1, x0', x1') := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y1 = x0') * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = x1') * (y0 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (y0' = (x0' - CONT_SZ)) * (y1' = (x1' - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1))))
(appendDimInfo: ,DimInfo(Access(head9,List(Variable(x0), Variable(x1)),Tensor),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
head11(x0, x1) := ((head1(x0, x1)) + (head5(x0, x1)))
(binAddUS_SOPNEQ: ,head11_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binAddRM_SOPNEQ: ,head11_RM(x0, x1, x0', x1') := ∅)
(binAddDimInfo_SOPNEQ: ,DimInfo(Access(head11,List(Variable(x0), Variable(x1)),Tensor),List(Variable(CONT_SZ), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
r.cont_degree2(x0, x1) := ((head11(x0, x1)) + (head9(x0, x1)))
(binAddUS_SOPNEQ: ,r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y1 = x0') * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = x1') * (y0 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (y0' = (x0' - CONT_SZ)) * (y1' = (x1' - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1))))
(binAddRM_SOPNEQ: ,r.cont_degree2_RM(x0, x1, x0', x1') := ∅)
(binAddDimInfo_SOPNEQ: ,DimInfo(Access(r.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor),Vector(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
##########################
(Dim_Info:,List(DimInfo(Access(cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor),Vector(Variable(CONT_SZ), Variable(CONT_SZ))), DimInfo(Access(other.count,Vector(),Tensor),Vector()), DimInfo(Access(cont_sum1,Vector(Variable(x0)),Tensor),Vector(Variable(CONT_SZ))), DimInfo(Access(other.cont_sum1,Vector(Variable(y1)),Tensor),Vector(Variable(CONT_SZ2))), DimInfo(Access(count,Vector(),Tensor),Vector()), DimInfo(Access(other.cont_degree2,Vector(Variable(y0), Variable(y1)),Tensor),Vector(Variable(CONT_SZ2), Variable(CONT_SZ2))), DimInfo(Access(r.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor),Vector(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))))))
(newUS:,HashMap(Access(other.cont_sum1,Vector(Variable(y1)),Tensor) -> Rule(Access(cont_sum1_US,List(Variable(y1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1))))))), Access(other.count,Vector(),Tensor) -> Rule(Access(,List(),Tensor),SoP(List())), Access(r.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor) -> Rule(Access(r.cont_degree2_US,Vector(Variable(x0), Variable(x1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,Variable(x0),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)))), Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)), Comparison(<=,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)))), Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(=,Variable(x1),Variable(x0')), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(=,Variable(x0),Variable(x1')), Comparison(>,Variable(x0),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)))), Prod(List(Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,Variable(y0),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)),Variable(y0)), Comparison(=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)), Comparison(<=,Variable(CONT_SZ),Variable(x0)), Comparison(<=,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)))), Prod(List(Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(=,Variable(y1),Variable(x0')), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(=,Variable(y0),Variable(x1')), Comparison(>,Variable(y0),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)),Variable(y0)), Comparison(=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)),Variable(y1)), Comparison(=,Arithmetic(-,Variable(x0'),Variable(CONT_SZ)),Variable(y0')), Comparison(=,Arithmetic(-,Variable(x1'),Variable(CONT_SZ)),Variable(y1')), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1)), Comparison(<=,Variable(CONT_SZ),Variable(x0)), Comparison(<=,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)),Variable(x1))))))), Access(other.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor) -> Rule(Access(cont_degree2_US,Vector(Variable(x0), Variable(x1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,Variable(x0),Variable(x1))))))), Access(cont_sum1,List(Variable(x0)),Tensor) -> Rule(Access(cont_sum1_US,List(Variable(x0)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0))))))), Access(other.cont_degree2,Vector(Variable(y0), Variable(y1)),Tensor) -> Rule(Access(cont_degree2_US,Vector(Variable(y0), Variable(y1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,Variable(y0),Variable(y1))))))), Access(other.cont_sum1,List(Variable(x1)),Tensor) -> Rule(Access(cont_sum1_US,List(Variable(x1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1))))))), Access(other.cont_sum1,List(Variable(x0)),Tensor) -> Rule(Access(cont_sum1_US,List(Variable(x0)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0))))))), Access(cont_sum1,List(Variable(x1)),Tensor) -> Rule(Access(cont_sum1_US,List(Variable(x1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1))))))), Access(cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor) -> Rule(Access(cont_degree2_US,Vector(Variable(x0), Variable(x1)),UniqueSet),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,Variable(x0),Variable(x1)))))))))
(newRM:,HashMap(Access(other.cont_sum1,Vector(Variable(y1)),Tensor) -> Rule(Access(cont_sum1_RM,List(Variable(y1), Variable(x0')),UniqueSet),SoP(List())), Access(other.count,Vector(),Tensor) -> Rule(Access(,List(),Tensor),SoP(List())), Access(r.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor) -> Rule(Access(r.cont_degree2_RM,Vector(Variable(x0), Variable(x1), Variable(x0'), Variable(x1')),RedundancyMap),SoP(List())), Access(other.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor) -> Rule(Access(cont_degree2_RM,Vector(Variable(x0), Variable(x1), Variable(x0'), Variable(x1')),RedundancyMap),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(=,Variable(x1),Variable(x0')), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(=,Variable(x0),Variable(x1')), Comparison(>,Variable(x0),Variable(x1))))))), Access(cont_sum1,List(Variable(x0)),Tensor) -> Rule(Access(cont_sum1_RM,List(Variable(x0), Variable(x0')),UniqueSet),SoP(List())), Access(other.cont_degree2,Vector(Variable(y0), Variable(y1)),Tensor) -> Rule(Access(cont_degree2_RM,Vector(Variable(y0), Variable(y1), Variable(x0'), Variable(x1')),RedundancyMap),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(<=,ConstantInt(0),Variable(y0)), Comparison(>,Variable(CONT_SZ2),Variable(y0)), Comparison(=,Variable(y1),Variable(x0')), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(<=,ConstantInt(0),Variable(y1)), Comparison(>,Variable(CONT_SZ2),Variable(y1)), Comparison(=,Variable(y0),Variable(x1')), Comparison(>,Variable(y0),Variable(y1))))))), Access(other.cont_sum1,List(Variable(x1)),Tensor) -> Rule(Access(cont_sum1_RM,List(Variable(x1), Variable(x1')),UniqueSet),SoP(List())), Access(other.cont_sum1,List(Variable(x0)),Tensor) -> Rule(Access(cont_sum1_RM,List(Variable(x0), Variable(x0')),UniqueSet),SoP(List())), Access(cont_sum1,List(Variable(x1)),Tensor) -> Rule(Access(cont_sum1_RM,List(Variable(x1), Variable(x1')),UniqueSet),SoP(List())), Access(cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor) -> Rule(Access(cont_degree2_RM,Vector(Variable(x0), Variable(x1), Variable(x0'), Variable(x1')),RedundancyMap),SoP(List(Prod(List(Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(<=,ConstantInt(0),Variable(x0)), Comparison(>,Variable(CONT_SZ),Variable(x0)), Comparison(=,Variable(x1),Variable(x0')), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(<=,ConstantInt(0),Variable(x1)), Comparison(>,Variable(CONT_SZ),Variable(x1)), Comparison(=,Variable(x0),Variable(x1')), Comparison(>,Variable(x0),Variable(x1)))))))))
r.cont_degree2(x0, x1) := ((cont_degree2(x0, x1) * other.count) + (cont_sum1(x0) * other.cont_sum1(y1) * (y1 = (x1 - CONT_SZ))) + (count * other.cont_degree2(y0, y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))))
r.cont_degree2(x0, x1) := ((cont_degree2(x0, x1) * other.count) + (cont_sum1(x0) * other.cont_sum1(y1) * (y1 = (x1 - CONT_SZ))) + (count * other.cont_degree2(y0, y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))))
head12(x0, x1) := ((cont_degree2(x0, x1) * other.count))
(binMultUS: ,head12_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binMultRM: ,head12_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binMultDimInfo: ,DimInfo(Access(head12,List(Variable(x0), Variable(x1)),Tensor),List(Variable(CONT_SZ), Variable(CONT_SZ))))
head17(x0, y1) := ((cont_sum1(x0) * other.cont_sum1(y1)))
(binMultUS: ,head17_US(x0, y1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1))))
(binMultRM: ,head17_RM(x0, y1, x0', y1') := ∅)
(binMultDimInfo: ,DimInfo(Access(head17,List(Variable(x0), Variable(y1)),Tensor),List(Variable(CONT_SZ), Variable(CONT_SZ2))))
head16(x0, x1) := ((head17(x0, y1) * (y1 = (x1 - CONT_SZ))))
(appendUS: ,head16_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1))))
(appendRM: ,head16_RM(x0, x1, x0', x1') := ∅)
(appendDimInfo: ,DimInfo(Access(head16,List(Variable(x0), Variable(x1)),Tensor),List(Variable(CONT_SZ), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
head21(y0, y1) := ((count * other.cont_degree2(y0, y1)))
(binMultUS: ,head21_US(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1))))
(binMultRM: ,head21_RM(y0, y1, y0', y1') := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y1 = x0') * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = x1') * (y0 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1))))
(binMultDimInfo: ,DimInfo(Access(head21,List(Variable(y0), Variable(y1)),Tensor),List(Variable(CONT_SZ2), Variable(CONT_SZ2))))
head20(x0, x1) := ((head21(y0, y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))))
(appendUS: ,head20_US(x0, x1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1))))
(appendRM: ,head20_RM(x0, x1, x0', x1') := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y1 = x0') * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = x1') * (y0 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (y0' = (x0' - CONT_SZ)) * (y1' = (x1' - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1))))
(appendDimInfo: ,DimInfo(Access(head20,List(Variable(x0), Variable(x1)),Tensor),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
head22(x0, x1) := ((head12(x0, x1)) + (head16(x0, x1)))
(binAddUS_SOPNEQ: ,head22_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1))))
(binAddRM_SOPNEQ: ,head22_RM(x0, x1, x0', x1') := ∅)
(binAddDimInfo_SOPNEQ: ,DimInfo(Access(head22,List(Variable(x0), Variable(x1)),Tensor),List(Variable(CONT_SZ), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
r.cont_degree2(x0, x1) := ((head22(x0, x1)) + (head20(x0, x1)))
(binAddUS_SOPNEQ: ,r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y1 = x0') * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = x1') * (y0 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (y0' = (x0' - CONT_SZ)) * (y1' = (x1' - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1))))
(binAddRM_SOPNEQ: ,r.cont_degree2_RM(x0, x1, x0', x1') := ∅)
(binAddDimInfo_SOPNEQ: ,DimInfo(Access(r.cont_degree2,Vector(Variable(x0), Variable(x1)),Tensor),Vector(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)), Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
==================
simplifiedOutUS
r.cont_degree2_US(x0, x1) := (((0 <= x1) * (CONT_SZ > x0) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= y1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ))) 
+ ((0 <= x1) * (x1' = x0) * (CONT_SZ > x0) * ((CONT_SZ2 + CONT_SZ) > x1) * (x0 > x1) * (x0' = x1) * (CONT_SZ > x1) * (0 <= x0)) 
+ ((y1' = (x1' - CONT_SZ)) * (y0 > y1) * (CONT_SZ2 > y0) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ <= x0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (x1' = y0) * (0 <= x1) * (0 <= y1) * (y0 = (x0 - CONT_SZ)) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0' = (x0' - CONT_SZ)) * (0 <= y0) * (x0' = y1)) 
+ ((0 <= x1) * (CONT_SZ > x0) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)) 
+ ((y0 <= y1) * (0 <= x1) * (CONT_SZ2 > y0) * ((CONT_SZ2 + CONT_SZ) > x1) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= y1) * (y0 = (x0 - CONT_SZ))))
------------------
simplifiedOutRM
r.cont_degree2_RM(x0, x1, x0', x1') := ∅
==================
void compute() {


for (int x0 = 0; x0 < CONT_SZ; ++x0) {
for (int x1 = std::max({0, CONT_SZ}); x1 < (CONT_SZ2 + CONT_SZ); ++x1) {
int y1 = (x1 - CONT_SZ);
if (0 <= y1 && y1 < CONT_SZ2) {


if (0 <= y1 && y1 < CONT_SZ2) {
r.cont_degree2[x0][x1] += (cont_sum1[x0] * other.cont_sum1[y1]);
}
if (0 <= y1 && y1 < CONT_SZ2) {
r.cont_degree2[x0][x1] += (count * other.cont_degree2[y0][y1]);
}
}
}
}


for (int x0 = 0; x0 < CONT_SZ; ++x0) {
for (int x1 = 0; x1 < std::min({(CONT_SZ2 + CONT_SZ), x0, CONT_SZ}); ++x1) {



if (0 <= x1 && x1 < CONT_SZ) {
r.cont_degree2[x0][x1] += (cont_degree2[x0][x1] * other.count);
}
}
}


for (int x0 = std::max({0, CONT_SZ}); x0 < (CONT_SZ2 + CONT_SZ); ++x0) {
for (int x1 = std::max({CONT_SZ, 0}); x1 < (CONT_SZ2 + CONT_SZ); ++x1) {
int y1 = (x1 - CONT_SZ);
if (0 <= y1 && y1 < CONT_SZ2) {
int y0 = (x0 - CONT_SZ);
if (std::max({(y1 + 1), 0}) <= y0 && y0 < CONT_SZ2) {

if (0 <= y1 && y1 < CONT_SZ2) {
r.cont_degree2[x0][x1] += (cont_sum1[x0] * other.cont_sum1[y1]);
}
if (0 <= y0 && y0 < CONT_SZ2 && 0 <= y1 && y1 < CONT_SZ2) {
r.cont_degree2[x0][x1] += (count * other.cont_degree2[y0][y1]);
}
}
}
}
}


for (int x0 = 0; x0 < CONT_SZ; ++x0) {
for (int x1 = std::max({0, x0}); x1 < std::min({(CONT_SZ2 + CONT_SZ), CONT_SZ}); ++x1) {



if (0 <= x1 && x1 < CONT_SZ) {
r.cont_degree2[x0][x1] += (cont_degree2[x0][x1] * other.count);
}
}
}


for (int x0 = std::max({0, CONT_SZ}); x0 < (CONT_SZ2 + CONT_SZ); ++x0) {
for (int x1 = std::max({0, CONT_SZ}); x1 < (CONT_SZ2 + CONT_SZ); ++x1) {
int y1 = (x1 - CONT_SZ);
if (0 <= y1 && y1 < CONT_SZ2) {
int y0 = (x0 - CONT_SZ);
if (0 <= y0 && y0 < std::min({(y1 + 1), CONT_SZ2})) {

if (0 <= y1 && y1 < CONT_SZ2) {
r.cont_degree2[x0][x1] += (cont_sum1[x0] * other.cont_sum1[y1]);
}
if (0 <= y0 && y0 < CONT_SZ2 && 0 <= y1 && y1 < CONT_SZ2) {
r.cont_degree2[x0][x1] += (count * other.cont_degree2[y0][y1]);
}
}
}
}
}

}


void reconstruct() {

}

===========================================================
[success] Total time: 12 s, completed Jan 12, 2023 4:03:33 PM
