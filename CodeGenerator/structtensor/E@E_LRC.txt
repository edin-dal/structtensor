[info] welcome to sbt 1.8.2 (Private Build Java 1.8.0_362)
[info] loading project definition from /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/project
[info] loading settings for project structtensor from build.sbt ...
[info] set current project to hello-world (in build file:/home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/)
[info] compiling 1 Scala source to /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/target/scala-2.13/classes ...
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:326:7: match may not be exhaustive.
[warn] It would fail on the following inputs: (Access(_, _, _), Access(_, _, _)), (Access(_, _, _), Comparison(_, _, _)), (Comparison(_, _, _), Access(_, _, _))
[warn]       (e1, e2) match {
[warn]       ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:449:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:551:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:617:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:639:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:707:11: match may not be exhaustive.
[warn] It would fail on the following inputs: Arithmetic(_, _, _), ConstantDouble(_), ConstantInt(_)
[warn]           index1 match {
[warn]           ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:728:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet), Comparison(_, _, _)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:766:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] 4 deprecations (since 2.11.0)
[warn] 7 deprecations (since 2.13.0)
[warn] 105 deprecations (since 2.13.3)
[warn] 116 deprecations in total; re-run with -deprecation for details
[warn] 12 warnings found
[info] done compiling
[info] running Main E2E_LR
compressionMap:
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
uniqueSet:
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
finalBodyC15: (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1)))
finalBodyC2: (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1) * cont_sum1(x0)))
==================
Tensor Computation
cont_degree2(x0, x1) := ((cont_sum1(x0) * cont_sum1(x1)))
==================
outUS
cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
------------------
outRM
cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1)))
------------------
outC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
==================
variableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
unifiedOutC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x0) * cont_sum1(x1)))
==================
distinctOutC
cont_degree2_C(x0, x1) := (((0 <= x1) * cont_sum1(x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1) * (CONT_SZ > x0) * cont_sum1(x0)))
==================
simplifiedOutUS
cont_degree2_US(x0, x1) := (((0 <= x1) * (CONT_SZ > x0) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)))
------------------
simplifiedOutRM
cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x1) * (x1' = x0) * (CONT_SZ > x0) * (x0 > x1) * (x0' = x1) * (CONT_SZ > x1) * (0 <= x0)))
------------------
simplifiedOutC
cont_degree2_C(x0, x1) := (((0 <= x1) * cont_sum1(x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1) * (CONT_SZ > x0) * cont_sum1(x0)))
==================
distinctConditionMapC
List(Map(Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
fixedConditionOrderC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))))
==================
eqVarMapC
List(Map())
==================
intervalsC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(ConstantInt(0), Variable(x0)),List(Variable(CONT_SZ)))))
==================
intervalsSimplifiedC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ)))))
==================
finalC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1) * cont_sum1(x0)))
==================
PathC
********************
Tensor Computation
cont_degree2(x0, x1) := ((cont_sum1(x1) * cont_sum1(x0)))
Interval
Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ))))
Equality Var Map
Map()
********************
==================
compressionMap:
other.count -> other.count_C := (((0 <= 0) * other.count))
other.cont_degree2(x0, x1) -> other.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
count -> count_C := (((0 <= 0) * count))
other.cont_sum1(x1) -> other.cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * other.cont_sum1(x1)))
other.cont_sum1(x0) -> other.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
uniqueSet:
other.count -> other.count_US := (((0 <= 0)))
other.cont_degree2(x0, x1) -> other.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
count -> count_US := (((0 <= 0)))
other.cont_sum1(x1) -> other.cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
other.cont_sum1(x0) -> other.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
finalBodyC15: (((0 <= 0)))
finalBodyC2: (((0 <= 0) * other.count))
==================
Tensor Computation
count := ((other.count))
==================
outUS
count_US := (((0 <= 0)))
------------------
outRM
count_RM := ∅
------------------
outC
count_C := (((0 <= 0) * other.count))
==================
variableConditionMapC
List(Map(Variable(0) -> List((<=,Variable(0)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(0) -> List((<=,Variable(0)))))
==================
unifiedOutC
count_C := (((0 <= 0) * other.count))
==================
distinctOutC
count_C := (((0 <= 0) * other.count))
==================
simplifiedOutUS
count_US := (((0 <= 0)))
------------------
simplifiedOutRM
count_RM := ∅
------------------
simplifiedOutC
count_C := (((0 <= 0) * other.count))
==================
distinctConditionMapC
List(Map(Variable(0) -> List((<=,Variable(0)))))
==================
fixedConditionOrderC
List(Map())
==================
eqVarMapC
List(Map())
==================
intervalsC
List(Map())
==================
intervalsSimplifiedC
List(Map())
==================
finalC
count_C := ((other.count))
==================
PathC
********************
Tensor Computation
count := ((other.count))
Interval
Map()
Equality Var Map
Map()
********************
==================
compressionMap:
other.count -> other.count_C := (((0 <= 0) * other.count))
other.cont_degree2(x0, x1) -> other.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
count -> count_C := (((0 <= 0) * count))
other.cont_sum1(x1) -> other.cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * other.cont_sum1(x1)))
other.cont_sum1(x0) -> other.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
uniqueSet:
other.count -> other.count_US := (((0 <= 0)))
other.cont_degree2(x0, x1) -> other.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
count -> count_US := (((0 <= 0)))
other.cont_sum1(x1) -> other.cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
other.cont_sum1(x0) -> other.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
finalBodyC15: (((0 <= x0) * (CONT_SZ > x0)))
finalBodyC2: (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
==================
Tensor Computation
cont_sum1(x0) := ((other.cont_sum1(x0)))
==================
outUS
cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
------------------
outRM
cont_sum1_RM(x0, x0') := ∅
------------------
outC
cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
==================
variableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
unifiedOutC
cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
==================
distinctOutC
cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
==================
simplifiedOutUS
cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
------------------
simplifiedOutRM
cont_sum1_RM(x0, x0') := ∅
------------------
simplifiedOutC
cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
==================
distinctConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
fixedConditionOrderC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
eqVarMapC
List(Map())
==================
intervalsC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))))
==================
intervalsSimplifiedC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))))
==================
finalC
cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
==================
PathC
********************
Tensor Computation
cont_sum1(x0) := ((other.cont_sum1(x0)))
Interval
Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))))
Equality Var Map
Map()
********************
==================
compressionMap:
other.count -> other.count_C := (((0 <= 0) * other.count))
other.cont_degree2(x0, x1) -> other.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
count -> count_C := (((0 <= 0) * count))
other.cont_sum1(x1) -> other.cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * other.cont_sum1(x1)))
other.cont_sum1(x0) -> other.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * other.cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
uniqueSet:
other.count -> other.count_US := (((0 <= 0)))
other.cont_degree2(x0, x1) -> other.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
count -> count_US := (((0 <= 0)))
other.cont_sum1(x1) -> other.cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
other.cont_sum1(x0) -> other.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
finalBodyC15: (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1)))
finalBodyC2: (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1) * other.cont_degree2(x0, x1)))
==================
Tensor Computation
cont_degree2(x0, x1) := ((other.cont_degree2(x0, x1)))
==================
outUS
cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
------------------
outRM
cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1)))
------------------
outC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
==================
variableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))))
==================
unifiedOutC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
==================
distinctOutC
cont_degree2_C(x0, x1) := (((0 <= x1) * other.cont_degree2(x0, x1) * (CONT_SZ > x0) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)))
==================
simplifiedOutUS
cont_degree2_US(x0, x1) := (((0 <= x1) * (CONT_SZ > x0) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)))
------------------
simplifiedOutRM
cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x1) * (x1' = x0) * (CONT_SZ > x0) * (x0 > x1) * (x0' = x1) * (CONT_SZ > x1) * (0 <= x0)))
------------------
simplifiedOutC
cont_degree2_C(x0, x1) := (((0 <= x1) * other.cont_degree2(x0, x1) * (CONT_SZ > x0) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)))
==================
distinctConditionMapC
List(Map(Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0))), Variable(x0) -> List((>,Variable(CONT_SZ)), (<=,ConstantInt(0)))))
==================
fixedConditionOrderC
List(Map(Variable(x0) -> List((>,Variable(CONT_SZ)), (<=,ConstantInt(0))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))))
==================
eqVarMapC
List(Map())
==================
intervalsC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(ConstantInt(0), Variable(x0)),List(Variable(CONT_SZ)))))
==================
intervalsSimplifiedC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ)))))
==================
finalC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1) * other.cont_degree2(x0, x1)))
==================
PathC
********************
Tensor Computation
cont_degree2(x0, x1) := ((other.cont_degree2(x0, x1)))
Interval
Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ))))
Equality Var Map
Map()
********************
==================
eC: (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= 0) * count * (0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
eUS: (((0 <= y0) * (CONT_SZ2 > y0)))
headDimSoP: (((0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0)))
headDimSoP2: (((CONT_SZ <= x0)))
shift: ((count * other.cont_sum1(y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
eC: (((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * (0 <= y1) * (CONT_SZ2 > y1) * other.cont_sum1(y1)))
eUS: (((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1)))
headDimSoP: (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)))
headDimSoP2: (((CONT_SZ <= x1)))
shift: ((cont_sum1(x0) * other.cont_sum1(y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)))
eC: (((0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1) * (0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
eUS: (((0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0)))
headDimSoP: (((0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0)))
headDimSoP2: (((CONT_SZ <= x0)))
shift: ((cont_sum1(x1) * other.cont_sum1(y0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
eC: (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= 0) * count * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * other.cont_sum1(y0) * other.cont_sum1(y1)))
eUS: (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1)))
headDimSoP: (((0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)))
headDimSoP2: (((CONT_SZ <= x0) * (CONT_SZ <= x1)))
shift: ((count * other.cont_sum1(y0) * other.cont_sum1(y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
compressionMap:
r.cont_sum1(x0) -> r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * r.cont_sum1(x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * r.cont_sum1(x0)))
other.cont_sum1(y1) -> other.cont_sum1_C(y1) := (((0 <= y1) * (CONT_SZ2 > y1) * other.cont_sum1(y1)))
other.count -> other.count_C := ((other.count))
other.cont_sum1(y0) -> other.cont_sum1_C(y0) := (((0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
r.cont_degree2(x0, x1) -> r.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * r.cont_degree2(x0, x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * r.cont_degree2(x0, x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * r.cont_degree2(x0, x1)))
other.cont_degree2(x0, x1) -> other.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ2 > x0) * (0 <= x1) * (CONT_SZ2 > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
other.cont_degree2(y0, y1) -> other.cont_degree2_C(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * other.cont_degree2(y0, y1)))
count -> count_C := ((count))
r.count -> r.count_C := ((r.count))
other.cont_sum1(x1) -> other.cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ2 > x1) * other.cont_sum1(x1)))
other.cont_sum1(x0) -> other.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ2 > x0) * other.cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1)))
uniqueSet:
r.cont_sum1(x0) -> r.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
other.cont_sum1(y1) -> other.cont_sum1_US(y1) := (((0 <= y1) * (CONT_SZ2 > y1)))
other.count -> count := (((0 <= 0)))
other.cont_sum1(y0) -> other.cont_sum1_US(y0) := (((0 <= y0) * (CONT_SZ2 > y0)))
r.cont_degree2(x0, x1) -> r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
other.cont_degree2(x0, x1) -> other.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ2 > x0) * (0 <= x1) * (CONT_SZ2 > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
other.cont_degree2(y0, y1) -> other.cont_degree2_US(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1)))
count -> count := (((0 <= 0)))
r.count -> r.count_US := (((0 <= 0)))
other.cont_sum1(x1) -> other.cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ2 > x1)))
other.cont_sum1(x0) -> other.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ2 > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
finalBodyC15: (((0 <= 0)))
finalBodyC2: (((0 <= 0) * count * other.count))
==================
Tensor Computation
r.count := ((count * other.count))
==================
outUS
r.count_US := (((0 <= 0)))
------------------
outRM
r.count_RM := (((0 <= 0)))
------------------
outC
r.count_C := (((0 <= 0) * count * other.count))
==================
variableConditionMapC
List(Map(Variable(0) -> List((<=,Variable(0)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(0) -> List((<=,Variable(0)))))
==================
unifiedOutC
r.count_C := (((0 <= 0) * count * other.count))
==================
distinctOutC
r.count_C := (((0 <= 0) * count * other.count))
==================
simplifiedOutUS
r.count_US := (((0 <= 0)))
------------------
simplifiedOutRM
r.count_RM := (((0 <= 0)))
------------------
simplifiedOutC
r.count_C := (((0 <= 0) * count * other.count))
==================
distinctConditionMapC
List(Map(Variable(0) -> List((<=,Variable(0)))))
==================
fixedConditionOrderC
List(Map())
==================
eqVarMapC
List(Map())
==================
intervalsC
List(Map())
==================
intervalsSimplifiedC
List(Map())
==================
finalC
r.count_C := ((count * other.count))
==================
PathC
********************
Tensor Computation
r.count := ((count * other.count))
Interval
Map()
Equality Var Map
Map()
********************
==================
compressionMap:
r.cont_sum1(x0) -> r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * r.cont_sum1(x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * r.cont_sum1(x0)))
other.cont_sum1(y1) -> other.cont_sum1_C(y1) := (((0 <= y1) * (CONT_SZ2 > y1) * other.cont_sum1(y1)))
other.count -> other.count_C := ((other.count))
other.cont_sum1(y0) -> other.cont_sum1_C(y0) := (((0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
r.cont_degree2(x0, x1) -> r.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * r.cont_degree2(x0, x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * r.cont_degree2(x0, x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * r.cont_degree2(x0, x1)))
other.cont_degree2(x0, x1) -> other.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ2 > x0) * (0 <= x1) * (CONT_SZ2 > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
other.cont_degree2(y0, y1) -> other.cont_degree2_C(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * other.cont_degree2(y0, y1)))
count -> count_C := ((count))
r.count -> r.count_C := ((r.count))
other.cont_sum1(x1) -> other.cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ2 > x1) * other.cont_sum1(x1)))
other.cont_sum1(x0) -> other.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ2 > x0) * other.cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1)))
uniqueSet:
r.cont_sum1(x0) -> r.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
other.cont_sum1(y1) -> other.cont_sum1_US(y1) := (((0 <= y1) * (CONT_SZ2 > y1)))
other.count -> count := (((0 <= 0)))
other.cont_sum1(y0) -> other.cont_sum1_US(y0) := (((0 <= y0) * (CONT_SZ2 > y0)))
r.cont_degree2(x0, x1) -> r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
other.cont_degree2(x0, x1) -> other.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ2 > x0) * (0 <= x1) * (CONT_SZ2 > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
other.cont_degree2(y0, y1) -> other.cont_degree2_US(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1)))
count -> count := (((0 <= 0)))
r.count -> r.count_US := (((0 <= 0)))
other.cont_sum1(x1) -> other.cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ2 > x1)))
other.cont_sum1(x0) -> other.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ2 > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
eC: (((0 <= y0) * (CONT_SZ2 > y0) * count * (0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
eUS: (((0 <= y0) * (CONT_SZ2 > y0)))
headDimSoP: (((0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0)))
headDimSoP2: (((CONT_SZ <= x0)))
shift: ((count * other.cont_sum1(y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
finalBodyC15: (((0 <= x0) * (CONT_SZ > x0)) + ((CONT_SZ <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0 = (x0 - CONT_SZ))))
finalBodyC2: (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * other.count) + ((CONT_SZ <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0 = (x0 - CONT_SZ)) * other.cont_sum1(y0) * count))
==================
Tensor Computation
r.cont_sum1(x0) := ((cont_sum1(x0) * other.count) + (count * other.cont_sum1(y0) * (y0 = (x0 - CONT_SZ))))
==================
outUS
r.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
------------------
outRM
r.cont_sum1_RM(x0, x0') := ∅
------------------
outC
r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * other.count) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * count * other.cont_sum1(y0) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
==================
variableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)))), Map(Variable(y0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)))), Map(Variable(y0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)))))
==================
unifiedOutC
r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * other.count) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * count * other.cont_sum1(y0)))
==================
distinctOutC
r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * other.count) + (other.cont_sum1(y0) * (CONT_SZ2 > y0) * count * (y0 = (x0 - CONT_SZ)) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0)))
==================
simplifiedOutUS
r.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)) + ((CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0)))
------------------
simplifiedOutRM
r.cont_sum1_RM(x0, x0') := ∅
------------------
simplifiedOutC
r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * other.count) + (other.cont_sum1(y0) * (CONT_SZ2 > y0) * count * (y0 = (x0 - CONT_SZ)) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0)))
==================
distinctConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))), Map(Variable(y0) -> List((>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ))), (<=,ConstantInt(0))), Variable(x0) -> List((>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,ConstantInt(0)), (<=,Variable(CONT_SZ)))))
==================
fixedConditionOrderC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))), Map(Variable(x0) -> List((>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,ConstantInt(0)), (<=,Variable(CONT_SZ))), Variable(y0) -> List((>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ))), (<=,ConstantInt(0)))))
==================
eqVarMapC
List(Map(), Map(Variable(y0) -> Arithmetic(-,Variable(x0),Variable(CONT_SZ))))
==================
intervalsC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))), Map(Variable(x0) -> Interval(List(ConstantInt(0), Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))))))
==================
intervalsSimplifiedC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))), Map(Variable(x0) -> Interval(List(Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))))))
==================
finalC
r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * other.count) + ((CONT_SZ <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0 = (x0 - CONT_SZ)) * other.cont_sum1(y0) * count))
==================
PathC
********************
Tensor Computation
r.cont_sum1(x0) := ((cont_sum1(x0) * other.count))
Interval
Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))))
Equality Var Map
Map()
********************
********************
Tensor Computation
r.cont_sum1(x0) := ((other.cont_sum1(y0) * count))
Interval
Map(Variable(x0) -> Interval(List(Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
Equality Var Map
Map(Variable(y0) -> Arithmetic(-,Variable(x0),Variable(CONT_SZ)))
********************
==================
compressionMap:
r.cont_sum1(x0) -> r.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * r.cont_sum1(x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * r.cont_sum1(x0)))
other.cont_sum1(y1) -> other.cont_sum1_C(y1) := (((0 <= y1) * (CONT_SZ2 > y1) * other.cont_sum1(y1)))
other.count -> other.count_C := ((other.count))
other.cont_sum1(y0) -> other.cont_sum1_C(y0) := (((0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
r.cont_degree2(x0, x1) -> r.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * r.cont_degree2(x0, x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * r.cont_degree2(x0, x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * r.cont_degree2(x0, x1)))
other.cont_degree2(x0, x1) -> other.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ2 > x0) * (0 <= x1) * (CONT_SZ2 > x1) * (x0 <= x1) * other.cont_degree2(x0, x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
other.cont_degree2(y0, y1) -> other.cont_degree2_C(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * other.cont_degree2(y0, y1)))
count -> count_C := ((count))
r.count -> r.count_C := ((r.count))
other.cont_sum1(x1) -> other.cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ2 > x1) * other.cont_sum1(x1)))
other.cont_sum1(x0) -> other.cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ2 > x0) * other.cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1)))
uniqueSet:
r.cont_sum1(x0) -> r.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
other.cont_sum1(y1) -> other.cont_sum1_US(y1) := (((0 <= y1) * (CONT_SZ2 > y1)))
other.count -> count := (((0 <= 0)))
other.cont_sum1(y0) -> other.cont_sum1_US(y0) := (((0 <= y0) * (CONT_SZ2 > y0)))
r.cont_degree2(x0, x1) -> r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
other.cont_degree2(x0, x1) -> other.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ2 > x0) * (0 <= x1) * (CONT_SZ2 > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
other.cont_degree2(y0, y1) -> other.cont_degree2_US(y0, y1) := (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1)))
count -> count := (((0 <= 0)))
r.count -> r.count_US := (((0 <= 0)))
other.cont_sum1(x1) -> other.cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ2 > x1)))
other.cont_sum1(x0) -> other.cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ2 > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
eC: (((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * (0 <= y1) * (CONT_SZ2 > y1) * other.cont_sum1(y1)))
eUS: (((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1)))
headDimSoP: (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)))
headDimSoP2: (((CONT_SZ <= x1)))
shift: ((cont_sum1(x0) * other.cont_sum1(y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)))
eC: (((0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1) * (0 <= y0) * (CONT_SZ2 > y0) * other.cont_sum1(y0)))
eUS: (((0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0)))
headDimSoP: (((0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0)))
headDimSoP2: (((CONT_SZ <= x0)))
shift: ((cont_sum1(x1) * other.cont_sum1(y0) * (0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0)))
eC: (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * count * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * other.cont_degree2(y0, y1)))
eUS: (((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1)))
headDimSoP: (((0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1)))
headDimSoP2: (((CONT_SZ <= x0) * (CONT_SZ <= x1)))
shift: ((count * other.cont_degree2(y0, y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
finalBodyC15: (((CONT_SZ <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= x0) * (CONT_SZ > x0) * (y1 = (x1 - CONT_SZ))) + ((x0 <= x1) * (CONT_SZ <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))) + ((x0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0)))
finalBodyC2: (((CONT_SZ <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= x0) * (CONT_SZ > x0) * (y1 = (x1 - CONT_SZ)) * other.cont_sum1(y1) * cont_sum1(x0)) + ((x0 <= x1) * (CONT_SZ <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * count * other.cont_degree2(y0, y1)) + ((x0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * other.count * cont_degree2(x0, x1)))
==================
Tensor Computation
r.cont_degree2(x0, x1) := ((cont_degree2(x0, x1) * other.count) + (cont_sum1(x0) * other.cont_sum1(y1) * (y1 = (x1 - CONT_SZ))) + (cont_sum1(x1) * other.cont_sum1(y0) * (y0 = (x0 - CONT_SZ))) + (count * other.cont_degree2(y0, y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ))))
==================
outUS
r.cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
------------------
outRM
r.cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1)) + ((0 <= x1) * (CONT_SZ > x1) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * (x1' = x0) * (x0' = x1) * (y0' = y1)) + ((x0' = x1) * (x1' = x0) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
------------------
outC
r.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1) * other.count) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * cont_sum1(x0) * other.cont_sum1(y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1) * other.count) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * cont_sum1(x0) * other.cont_sum1(y1) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1) * count * other.cont_degree2(y0, y1) * (0 <= y0) * (CONT_SZ2 > y0) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * (CONT_SZ <= x1)))
==================
variableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))), Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))))), Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))), Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)))), Map(Variable(y0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (<=,Variable(y0)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (<=,Variable(y0)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))), Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))))), Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))), Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)))), Map(Variable(y0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (<=,Variable(y0)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (<=,Variable(y0)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ)))))
==================
unifiedOutC
r.cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1) * other.count) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * cont_sum1(x0) * other.cont_sum1(y1)) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * cont_degree2(x0, x1) * other.count) + ((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= y1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * cont_sum1(x0) * other.cont_sum1(y1)) + ((0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= y0) * (CONT_SZ2 > y0) * (y0 = (x0 - CONT_SZ)) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y1 = (x1 - CONT_SZ)) * (0 <= y1) * (CONT_SZ2 > y1) * (y0 <= y1) * (y1 = (x1 - CONT_SZ)) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * (0 <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x0) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x1) * count * other.cont_degree2(y0, y1)))
==================
distinctOutC
r.cont_degree2_C(x0, x1) := (((0 <= x1) * other.count * (CONT_SZ > x0) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= y1) * cont_degree2(x0, x1) * (0 <= x0) * (x0 <= x1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (CONT_SZ <= x1) * (CONT_SZ > x1)) + (other.cont_sum1(y1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= y1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (CONT_SZ > x0) * cont_sum1(x0)) + ((y0 <= y1) * (0 <= x1) * (CONT_SZ2 > y0) * count * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * ((CONT_SZ2 + CONT_SZ) > x1) * other.cont_degree2(y0, y1) * (0 <= y1) * (y0 = (x0 - CONT_SZ))) + ((0 <= x1) * other.count * (CONT_SZ > x0) * cont_degree2(x0, x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)) + (other.cont_sum1(y1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= y1) * (0 <= x0) * (x0 <= x1) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (CONT_SZ > x0) * cont_sum1(x0) * (CONT_SZ <= x1) * (CONT_SZ > x1)))
==================
simplifiedOutUS
r.cont_degree2_US(x0, x1) := (((0 <= x1) * (CONT_SZ > x0) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)) + ((0 <= x1) * (CONT_SZ > x0) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= y1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ))) + ((y0 <= y1) * (0 <= x1) * (CONT_SZ2 > y0) * ((CONT_SZ2 + CONT_SZ) > x1) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (0 <= y1) * (y0 = (x0 - CONT_SZ))))
------------------
simplifiedOutRM
r.cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x1) * (x1' = x0) * (CONT_SZ > x0) * (x0 > x1) * (x0' = x1) * (CONT_SZ > x1) * (0 <= x0)) + ((0 <= x1) * (y0' = y1) * (x1' = x0) * (CONT_SZ2 > y0) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0) * (x0' = x1) * (y0 = (x0 - CONT_SZ))) + ((0 <= x1) * (x1' = x0) * ((CONT_SZ2 + CONT_SZ) > x1) * (x0' = x1) * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ <= x0)))
------------------
simplifiedOutC
r.cont_degree2_C(x0, x1) := ((other.cont_sum1(y1) * (0 <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= y1) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * (CONT_SZ > x0) * cont_sum1(x0)) + ((y0 <= y1) * (0 <= x1) * (CONT_SZ2 > y0) * count * ((CONT_SZ2 + CONT_SZ) > x0) * (CONT_SZ <= x1) * (0 <= x0) * (CONT_SZ <= x0) * (0 <= y0) * (CONT_SZ2 > y1) * (y1 = (x1 - CONT_SZ)) * ((CONT_SZ2 + CONT_SZ) > x1) * other.cont_degree2(y0, y1) * (0 <= y1) * (y0 = (x0 - CONT_SZ))) + ((0 <= x1) * other.count * (CONT_SZ > x0) * cont_degree2(x0, x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)))
==================
distinctConditionMapC
List(Map(Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ)))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))), Map(Variable(y1) -> List((<=,Variable(y0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0))), Variable(x1) -> List((<=,ConstantInt(0)), (<=,Variable(CONT_SZ)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(y0) -> List((>,Variable(CONT_SZ2)), (<=,ConstantInt(0)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)))), Variable(x0) -> List((>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,ConstantInt(0)), (<=,Variable(CONT_SZ)))), Map(Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0))), Variable(x0) -> List((>,Variable(CONT_SZ)), (<=,ConstantInt(0)))))
==================
fixedConditionOrderC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,Variable(CONT_SZ))), Variable(y1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))))), Map(Variable(x0) -> List((>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))), (<=,ConstantInt(0)), (<=,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (<=,Variable(CONT_SZ)), (>,Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(y0) -> List((>=,Variable(y1)), (>,Variable(CONT_SZ2)), (<=,ConstantInt(0)), (=,Arithmetic(-,Variable(x0),Variable(CONT_SZ)))), Variable(y1) -> List((>,Variable(CONT_SZ2)), (=,Arithmetic(-,Variable(x1),Variable(CONT_SZ))), (<=,ConstantInt(0)))), Map(Variable(x0) -> List((>,Variable(CONT_SZ)), (<=,ConstantInt(0))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))))
==================
eqVarMapC
List(Map(Variable(y1) -> Arithmetic(-,Variable(x1),Variable(CONT_SZ))), Map(Variable(y0) -> Arithmetic(-,Variable(x0),Variable(CONT_SZ)), Variable(y1) -> Arithmetic(-,Variable(x1),Variable(CONT_SZ))), Map())
==================
intervalsC
List(HashMap(Variable(x1) -> Interval(List(ConstantInt(0), Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))), HashMap(Variable(x1) -> Interval(List(Variable(x0), ConstantInt(0), Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(x0) -> Interval(List(ConstantInt(0), Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))))), HashMap(Variable(x1) -> Interval(List(ConstantInt(0), Variable(x0)),List(Variable(CONT_SZ))), Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))))
==================
intervalsSimplifiedC
List(HashMap(Variable(x1) -> Interval(List(Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))), HashMap(Variable(x1) -> Interval(List(Variable(x0), Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(x0) -> Interval(List(Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ))))), HashMap(Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ))), Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ)))))
==================
finalC
r.cont_degree2_C(x0, x1) := (((CONT_SZ <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (0 <= x0) * (CONT_SZ > x0) * (y1 = (x1 - CONT_SZ)) * other.cont_sum1(y1) * cont_sum1(x0)) + ((x0 <= x1) * (CONT_SZ <= x1) * ((CONT_SZ2 + CONT_SZ) > x1) * (CONT_SZ <= x0) * ((CONT_SZ2 + CONT_SZ) > x0) * (y0 = (x0 - CONT_SZ)) * (y1 = (x1 - CONT_SZ)) * count * other.cont_degree2(y0, y1)) + ((x0 <= x1) * (CONT_SZ > x1) * (0 <= x0) * (CONT_SZ > x0) * other.count * cont_degree2(x0, x1)))
==================
PathC
********************
Tensor Computation
r.cont_degree2(x0, x1) := ((other.cont_sum1(y1) * cont_sum1(x0)))
Interval
HashMap(Variable(x1) -> Interval(List(Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))))
Equality Var Map
Map(Variable(y1) -> Arithmetic(-,Variable(x1),Variable(CONT_SZ)))
********************
********************
Tensor Computation
r.cont_degree2(x0, x1) := ((count * other.cont_degree2(y0, y1)))
Interval
HashMap(Variable(x1) -> Interval(List(Variable(x0), Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))), Variable(x0) -> Interval(List(Variable(CONT_SZ)),List(Arithmetic(+,Variable(CONT_SZ2),Variable(CONT_SZ)))))
Equality Var Map
Map(Variable(y0) -> Arithmetic(-,Variable(x0),Variable(CONT_SZ)), Variable(y1) -> Arithmetic(-,Variable(x1),Variable(CONT_SZ)))
********************
********************
Tensor Computation
r.cont_degree2(x0, x1) := ((other.count * cont_degree2(x0, x1)))
Interval
HashMap(Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ))), Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))))
Equality Var Map
Map()
********************
==================
compressionMap:
cont_degree2(x0, x1) -> cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
cont_sum1(x0) -> cont_sum1_C(x0) := (((0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0)))
cont_sum1(x1) -> cont_sum1_C(x1) := (((0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
uniqueSet:
cont_degree2(x0, x1) -> cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
cont_sum1(x0) -> cont_sum1_US(x0) := (((0 <= x0) * (CONT_SZ > x0)))
cont_sum1(x1) -> cont_sum1_US(x1) := (((0 <= x1) * (CONT_SZ > x1)))
finalBodyC15: (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1)))
finalBodyC2: (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1) * cont_sum1(x0)))
==================
Tensor Computation
cont_degree2(x0, x1) := ((cont_sum1(x0) * cont_sum1(x1)))
==================
outUS
cont_degree2_US(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1)))
------------------
outRM
cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x0) * (CONT_SZ > x0) * (x1 = x0') * (0 <= x1) * (CONT_SZ > x1) * (x0 = x1') * (x0 > x1)))
------------------
outC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x0) * (CONT_SZ > x0) * cont_sum1(x0) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1)))
==================
variableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
unifiedVariableConditionMapC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)), (<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
unifiedOutC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (0 <= x0) * (CONT_SZ > x0) * (0 <= x1) * (CONT_SZ > x1) * (x0 <= x1) * (0 <= x1) * (CONT_SZ > x1) * cont_sum1(x0) * cont_sum1(x1)))
==================
distinctOutC
cont_degree2_C(x0, x1) := (((0 <= x1) * cont_sum1(x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1) * (CONT_SZ > x0) * cont_sum1(x0)))
==================
simplifiedOutUS
cont_degree2_US(x0, x1) := (((0 <= x1) * (CONT_SZ > x0) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1)))
------------------
simplifiedOutRM
cont_degree2_RM(x0, x1, x0', x1') := (((0 <= x1) * (x1' = x0) * (CONT_SZ > x0) * (x0 > x1) * (x0' = x1) * (CONT_SZ > x1) * (0 <= x0)))
------------------
simplifiedOutC
cont_degree2_C(x0, x1) := (((0 <= x1) * cont_sum1(x1) * (CONT_SZ > x1) * (0 <= x0) * (x0 <= x1) * (CONT_SZ > x0) * cont_sum1(x0)))
==================
distinctConditionMapC
List(Map(Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0))), Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)))))
==================
fixedConditionOrderC
List(Map(Variable(x0) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ))), Variable(x1) -> List((<=,ConstantInt(0)), (>,Variable(CONT_SZ)), (<=,Variable(x0)))))
==================
eqVarMapC
List(Map())
==================
intervalsC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(ConstantInt(0), Variable(x0)),List(Variable(CONT_SZ)))))
==================
intervalsSimplifiedC
List(Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ)))))
==================
finalC
cont_degree2_C(x0, x1) := (((0 <= x0) * (CONT_SZ > x0) * (x0 <= x1) * (CONT_SZ > x1) * cont_sum1(x1) * cont_sum1(x0)))
==================
PathC
********************
Tensor Computation
cont_degree2(x0, x1) := ((cont_sum1(x1) * cont_sum1(x0)))
Interval
Map(Variable(x0) -> Interval(List(ConstantInt(0)),List(Variable(CONT_SZ))), Variable(x1) -> Interval(List(Variable(x0)),List(Variable(CONT_SZ))))
Equality Var Map
Map()
********************
==================
[success] Total time: 9 s, completed 07-Jul-2023 03:19:36
