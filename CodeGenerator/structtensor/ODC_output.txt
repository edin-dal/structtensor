[info] welcome to sbt 1.8.2 (Private Build Java 1.8.0_362)
[info] loading project definition from /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/project
[info] loading settings for project structtensor from build.sbt ...
[info] set current project to hello-world (in build file:/home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/)
[info] compiling 1 Scala source to /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/target/scala-2.13/classes ...
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:324:7: match may not be exhaustive.
[warn] It would fail on the following inputs: (Access(_, _, _), Access(_, _, _)), (Access(_, _, _), Comparison(_, _, _)), (Comparison(_, _, _), Access(_, _, _))
[warn]       (e1, e2) match {
[warn]       ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:447:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:549:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:615:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:637:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:705:11: match may not be exhaustive.
[warn] It would fail on the following inputs: Arithmetic(_, _, _), ConstantDouble(_), ConstantInt(_)
[warn]           index1 match {
[warn]           ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:726:5: match may not be exhaustive.
[warn] It would fail on the following inputs: Access(_, _, CompressedTensor), Access(_, _, RedundancyMap), Access(_, _, UniqueSet), Comparison(_, _, _)
[warn]     e match {
[warn]     ^
[warn] /home/mahdi/CS-PhD/Git/sparse-compiler/CodeGenerator/structtensor/src/main/scala/Main.scala:759:5: Exhaustivity analysis reached max recursion depth, not all missing cases are reported.
[warn] (Please try with scalac -Ypatmat-exhaust-depth 40 or -Ypatmat-exhaust-depth off.)
[warn]     (e1, e2) match {
[warn]     ^
[warn] 1 deprecation (since 2.11.0)
[warn] 7 deprecations (since 2.13.0)
[warn] 100 deprecations (since 2.13.3)
[warn] 108 deprecations in total; re-run with -deprecation for details
[warn] 12 warnings found
[info] done compiling
[info] running Main ODC
input redundancy map:
H_RM(i, j, i', j') := (((1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j)))
Y_US(i) := (((0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * (0 <= j) * (N > j)) + ((1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (0 <= j) * (N > j)))
==================
outC
Y_C(i) := (((0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * (0 <= j) * (N > j) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * (0 <= j) * (N > j) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * H(i, j) * (0 <= j) * (N > j) * X(j)) + ((0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * (0 <= j) * (N > j) * (1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (0 <= i') * (((M' + N') - 1) > i') * (0 <= j') * (N' > j') * (M' > i') * (j' = 0) * H(i', j') * (0 <= j) * (N > j) * X(j)) + ((1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * (0 <= j) * (N > j) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (M > i) * (j = 0) * H(i, j) * (0 <= j) * (N > j) * X(j)) + ((1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (1 <= j) * (j <= i) * ((j + M) > i) * (j' = 0) * (i' = (i - j)) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (0 <= i') * (((M' + N') - 1) > i') * (0 <= j') * (N' > j') * (M' > i') * (j' = 0) * H(i', j') * (0 <= j) * (N > j) * X(j)))
==================
variableConditionMapC
List(Map(Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M))), Variable(j) -> List((<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)))), Map(Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j) -> List((<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(j') -> List((=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N')), (=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M'),Variable(N')),ConstantInt(1))), (>,Variable(M')))), Map(Variable(j) -> List((<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(i) -> List((<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M))), Variable(j') -> List((=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))))), Map(Variable(j) -> List((<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(i) -> List((<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j') -> List((=,ConstantInt(0)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N')), (=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))), (=,Arithmetic(-,Variable(i),Variable(j))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M'),Variable(N')),ConstantInt(1))), (>,Variable(M')))))
------------------
variableConditionMapRC
List()
==================
unifiedVariableConditionMapC
List(Map(Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M))), Variable(j) -> List((<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)))), Map(Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j) -> List((<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(j') -> List((=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N')), (=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M'),Variable(N')),ConstantInt(1))), (>,Variable(M')))), Map(Variable(j) -> List((<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(i) -> List((<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M))), Variable(j') -> List((=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))))), Map(Variable(j) -> List((<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N)), (<=,ConstantInt(0)), (>,Variable(N))), Variable(i) -> List((<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (<=,Variable(j)), (>,Arithmetic(+,Variable(j),Variable(M))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j') -> List((=,ConstantInt(0)), (=,ConstantInt(0)), (<=,ConstantInt(0)), (>,Variable(N')), (=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))), (=,Arithmetic(-,Variable(i),Variable(j))), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M'),Variable(N')),ConstantInt(1))), (>,Variable(M')))))
------------------
unifiedVariableConditionMapRC
List()
==================
unifiedOutC
Y_C(i) := (((0 <= i) * (((M + N) - 1) > i) * (M > i) * (0 <= i) * (((M + N) - 1) > i) * (M > i) * (0 <= i) * (((M + N) - 1) > i) * (M > i) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j) * H(i, j) * X(j)) + ((0 <= i) * (((M + N) - 1) > i) * (M > i) * (j <= i) * ((j + M) > i) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j) * (1 <= j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j' = 0) * (0 <= j') * (N' > j') * (j' = 0) * (i' = (i - j)) * (0 <= i') * (((M' + N') - 1) > i') * (M' > i') * H(i', j') * X(j)) + ((1 <= j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j = 0) * (0 <= j) * (N > j) * (j <= i) * ((j + M) > i) * (0 <= i) * (((M + N) - 1) > i) * (0 <= i) * (((M + N) - 1) > i) * (M > i) * (0 <= i) * (((M + N) - 1) > i) * (M > i) * (j' = 0) * (i' = (i - j)) * H(i, j) * X(j)) + ((1 <= j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (1 <= j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (0 <= j) * (N > j) * (j <= i) * ((j + M) > i) * (0 <= i) * (((M + N) - 1) > i) * (j <= i) * ((j + M) > i) * (0 <= i) * (((M + N) - 1) > i) * (j' = 0) * (j' = 0) * (0 <= j') * (N' > j') * (j' = 0) * (i' = (i - j)) * (i' = (i - j)) * (0 <= i') * (((M' + N') - 1) > i') * (M' > i') * H(i', j') * X(j)))
------------------
unifiedOutRC
Y_RM(i, i') := ∅
==================
distinctOutC
Y_C(i) := (((N > j) * (j = 0) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * X(j) * (M > i) * H(i, j)) + ((N > j) * (1 <= j) * (0 <= j') * (M' > i') * (0 <= j) * (N' > j') * X(j) * (j' = 0) * (M > i) * (0 <= i') * H(i', j') * ((j + M) > i) * (i' = (i - j)) * (j = 0) * (j <= i) * (0 <= i) * (((M' + N') - 1) > i') * (((M + N) - 1) > i)) + ((N > j) * (1 <= j) * (((M + N) - 1) > i) * (0 <= j) * X(j) * (j' = 0) * (M > i) * H(i, j) * ((j + M) > i) * (i' = (i - j)) * (j = 0) * (j <= i) * (0 <= i)) + ((N > j) * (1 <= j) * (i' = (i - j)) * (0 <= j') * (M' > i') * (0 <= j) * (N' > j') * X(j) * (j' = 0) * (0 <= i') * H(i', j') * ((j + M) > i) * (j <= i) * (0 <= i) * (((M' + N') - 1) > i') * (((M + N) - 1) > i)))
------------------
distinctOutRC
Y_RM(i, i') := ∅
==================
simplifiedOutC
Y_C(i) := (((N > j) * (j = 0) * (0 <= i) * (((M + N) - 1) > i) * (0 <= j) * X(j) * (M > i) * H(i, j)) + ((N > j) * (1 <= j) * (i' = (i - j)) * (0 <= j') * (M' > i') * (0 <= j) * (N' > j') * X(j) * (j' = 0) * (0 <= i') * H(i', j') * ((j + M) > i) * (j <= i) * (0 <= i) * (((M' + N') - 1) > i') * (((M + N) - 1) > i)))
------------------
simplifiedOutRC
Y_RM(i, i') := ∅
==================
distinctConditionMapC
List(Map(Variable(j) -> List((>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0))), Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)))), Map(Variable(j) -> List((>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))), (>,Variable(M')), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M'),Variable(N')),ConstantInt(1)))), Variable(j') -> List((<=,ConstantInt(0)), (>,Variable(N')), (=,ConstantInt(0))), Variable(i) -> List((>,Arithmetic(+,Variable(j),Variable(M))), (<=,Variable(j)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))))))
------------------
distinctConditionMapRC
List()
==================
fixedConditionOrderC
List(Map(Variable(j) -> List((>,Variable(N)), (=,ConstantInt(0)), (<=,ConstantInt(0))), Variable(i) -> List((<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))), (>,Variable(M)))), Map(Variable(j) -> List((>,Variable(N)), (<=,ConstantInt(1)), (<=,ConstantInt(0))), Variable(i) -> List((>,Arithmetic(+,Variable(j),Variable(M))), (<=,Variable(j)), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)))), Variable(j') -> List((<=,ConstantInt(0)), (>,Variable(N')), (=,ConstantInt(0))), Variable(i') -> List((=,Arithmetic(-,Variable(i),Variable(j))), (>,Variable(M')), (<=,ConstantInt(0)), (>,Arithmetic(-,Arithmetic(+,Variable(M'),Variable(N')),ConstantInt(1))))))
------------------
fixedConditionOrderRC
List()
==================
eqVarMapC
List(Map(Variable(j) -> ConstantInt(0)), Map(Variable(j') -> ConstantInt(0), Variable(i') -> Arithmetic(-,Variable(i),Variable(j))))
------------------
eqVarMapRC
List()
==================
intervalsC
List(Map(Variable(i) -> Interval(List(ConstantInt(0)),List(Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1)), Variable(M)))), Map(Variable(j) -> Interval(List(ConstantInt(1), ConstantInt(0)),List(Variable(N))), Variable(i) -> Interval(List(Variable(j), ConstantInt(0)),List(Arithmetic(+,Variable(j),Variable(M)), Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))))))
------------------
intervalsRC
List()
==================
intervalsSimplifiedC
List(Map(Variable(i) -> Interval(List(ConstantInt(0)),List(Variable(M), Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))))), Map(Variable(j) -> Interval(List(ConstantInt(1)),List(Variable(N))), Variable(i) -> Interval(List(Variable(j)),List(Arithmetic(+,Variable(j),Variable(M)), Arithmetic(-,Arithmetic(+,Variable(M),Variable(N)),ConstantInt(1))))))
------------------
intervalsSimplifiedRC
List()
==================
finalC
Y_C(i) := (((0 <= i) * (M > i) * (((M + N) - 1) > i) * (j = 0) * X(j) * H(i, j)) + ((1 <= j) * (N > j) * (j <= i) * ((j + M) > i) * (((M + N) - 1) > i) * (j' = 0) * (i' = (i - j)) * X(j) * H(i', j')))
------------------
finalRC
Y_RM(i, i') := ∅
==================
[success] Total time: 9 s, completed 06-Jul-2023 02:28:01
